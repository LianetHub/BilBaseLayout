/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n\r\n\r\n    const isMobile = {\r\n        Android: function () {\r\n            return navigator.userAgent.match(/Android/i);\r\n        },\r\n        BlackBerry: function () {\r\n            return navigator.userAgent.match(/BlackBerry/i);\r\n        },\r\n        iOS: function () {\r\n            return navigator.userAgent.match(/iPhone|iPad|iPod/i);\r\n        },\r\n        Opera: function () {\r\n            return navigator.userAgent.match(/Opera Mini/i);\r\n        },\r\n        Windows: function () {\r\n            return navigator.userAgent.match(/IEMobile/i);\r\n        },\r\n        any: function () {\r\n            return (\r\n                isMobile.Android() ||\r\n                isMobile.BlackBerry() ||\r\n                isMobile.iOS() ||\r\n                isMobile.Opera() ||\r\n                isMobile.Windows());\r\n        },\r\n    };\r\n\r\n    function getNavigator() {\r\n        if (isMobile.any() || window.innerWidth < 992) {\r\n            document.body.classList.remove(\"_pc\");\r\n            document.body.classList.add(\"_touch\");\r\n        } else {\r\n            document.body.classList.remove(\"_touch\");\r\n            document.body.classList.add(\"_pc\");\r\n        }\r\n    }\r\n\r\n    getNavigator();\r\n\r\n    window.addEventListener('resize', () => {\r\n        getNavigator()\r\n    });\r\n\r\n\r\n    var phoneInputs = document.querySelectorAll('input[type=\"tel\"]');\r\n\r\n    var getInputNumbersValue = function (input) {\r\n        // Return stripped input value — just numbers\r\n        return input.value.replace(/\\D/g, '');\r\n    }\r\n\r\n    var onPhonePaste = function (e) {\r\n        var input = e.target,\r\n            inputNumbersValue = getInputNumbersValue(input);\r\n        var pasted = e.clipboardData || window.clipboardData;\r\n        if (pasted) {\r\n            var pastedText = pasted.getData('Text');\r\n            if (/\\D/g.test(pastedText)) {\r\n                // Attempt to paste non-numeric symbol — remove all non-numeric symbols,\r\n                // formatting will be in onPhoneInput handler\r\n                input.value = inputNumbersValue;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    var onPhoneInput = function (e) {\r\n        var input = e.target,\r\n            inputNumbersValue = getInputNumbersValue(input),\r\n            selectionStart = input.selectionStart,\r\n            formattedInputValue = \"\";\r\n\r\n        if (!inputNumbersValue) {\r\n            return input.value = \"\";\r\n        }\r\n\r\n        if (input.value.length != selectionStart) {\r\n            // Editing in the middle of input, not last symbol\r\n            if (e.data && /\\D/g.test(e.data)) {\r\n                // Attempt to input non-numeric symbol\r\n                input.value = inputNumbersValue;\r\n            }\r\n            return;\r\n        }\r\n\r\n        if ([\"7\", \"8\", \"9\"].indexOf(inputNumbersValue[0]) > -1) {\r\n            if (inputNumbersValue[0] == \"9\") inputNumbersValue = \"7\" + inputNumbersValue;\r\n            var firstSymbols = (inputNumbersValue[0] == \"8\") ? \"8\" : \"+7\";\r\n            formattedInputValue = input.value = firstSymbols + \" \";\r\n            if (inputNumbersValue.length > 1) {\r\n                formattedInputValue += '(' + inputNumbersValue.substring(1, 4);\r\n            }\r\n            if (inputNumbersValue.length >= 5) {\r\n                formattedInputValue += ') ' + inputNumbersValue.substring(4, 7);\r\n            }\r\n            if (inputNumbersValue.length >= 8) {\r\n                formattedInputValue += '-' + inputNumbersValue.substring(7, 9);\r\n            }\r\n            if (inputNumbersValue.length >= 10) {\r\n                formattedInputValue += '-' + inputNumbersValue.substring(9, 11);\r\n            }\r\n        } else {\r\n            formattedInputValue = '+' + inputNumbersValue.substring(0, 16);\r\n        }\r\n        input.value = formattedInputValue;\r\n    }\r\n    var onPhoneKeyDown = function (e) {\r\n        // Clear input after remove last symbol\r\n        var inputValue = e.target.value.replace(/\\D/g, '');\r\n        if (e.keyCode == 8 && inputValue.length == 1) {\r\n            e.target.value = \"\";\r\n        }\r\n    }\r\n    for (var phoneInput of phoneInputs) {\r\n        phoneInput.addEventListener('keydown', onPhoneKeyDown);\r\n        phoneInput.addEventListener('input', onPhoneInput, false);\r\n        phoneInput.addEventListener('paste', onPhonePaste, false);\r\n    }\r\n\r\n\r\n\r\n\r\n    // Diagram\r\n\r\n    const tabs = document.querySelectorAll('.benefits__tab');\r\n    const allDiagrams = document.querySelectorAll('.benefits__diagram');\r\n\r\n    // Функция для управления интерактивностью одной конкретной диаграммы\r\n    const setupDiagramInteractivity = (diagramElement) => {\r\n        // Если элемента диаграммы нет, выходим\r\n        if (!diagramElement) return;\r\n\r\n        const diagramItems = diagramElement.querySelectorAll('.benefits__diagram-item');\r\n        const diagramTexts = diagramElement.querySelectorAll('.benefits__diagram-text');\r\n        const svgGroups = diagramElement.querySelectorAll('.benefits__diagram-image g');\r\n\r\n        // Функция для деактивации всех элементов внутри текущей диаграммы\r\n        const deactivateAll = () => {\r\n            diagramItems.forEach(item => item.classList.remove('active'));\r\n            diagramTexts.forEach(text => {\r\n                text.classList.remove('active');\r\n                // Сбрасываем стили для скрытия текста\r\n                text.style.position = 'absolute';\r\n                text.style.visibility = 'hidden';\r\n            });\r\n            svgGroups.forEach(group => group.classList.remove('active'));\r\n        };\r\n\r\n        // Проверяем, есть ли SVG-группы для интерактивности\r\n        if (svgGroups.length > 0) {\r\n            svgGroups.forEach((group, index) => {\r\n                // Важно: Удаляем ранее добавленные обработчики, чтобы избежать дублирования\r\n                if (group._currentMouseoverHandler) {\r\n                    group.removeEventListener('mouseover', group._currentMouseoverHandler);\r\n                }\r\n\r\n                // Создаем новый обработчик\r\n                const mouseoverHandler = () => {\r\n                    deactivateAll();\r\n                    group.classList.add('active');\r\n                    if (diagramItems[index]) {\r\n                        diagramItems[index].classList.add('active');\r\n                    }\r\n                    if (diagramTexts[index]) {\r\n                        diagramTexts[index].classList.add('active');\r\n                        // Восстанавливаем стили для отображения текста\r\n                        diagramTexts[index].style.position = 'static';\r\n                        diagramTexts[index].style.visibility = 'visible';\r\n                    }\r\n                };\r\n\r\n                // Добавляем новый обработчик и сохраняем на него ссылку\r\n                group.addEventListener('mouseover', mouseoverHandler);\r\n                group._currentMouseoverHandler = mouseoverHandler; // Сохраняем ссылку на обработчик для последующего удаления\r\n            });\r\n        }\r\n    };\r\n\r\n    // Функция для активации дефолтного элемента на заданной диаграмме\r\n    const activateDefaultDiagramItem = (diagramElement) => {\r\n        if (!diagramElement) return;\r\n\r\n        const diagramItems = diagramElement.querySelectorAll('.benefits__diagram-item');\r\n        const diagramTexts = diagramElement.querySelectorAll('.benefits__diagram-text');\r\n        const svgGroups = diagramElement.querySelectorAll('.benefits__diagram-image g');\r\n\r\n        // Деактивируем все элементы перед установкой дефолтного\r\n        diagramItems.forEach(item => item.classList.remove('active'));\r\n        diagramTexts.forEach(text => {\r\n            text.classList.remove('active');\r\n            text.style.position = 'absolute';\r\n            text.style.visibility = 'hidden';\r\n        });\r\n        svgGroups.forEach(group => group.classList.remove('active'));\r\n\r\n        // Активируем третий элемент (индекс 2), если он существует\r\n        if (diagramItems[2]) {\r\n            diagramItems[2].classList.add('active');\r\n        }\r\n        if (diagramTexts[2]) {\r\n            diagramTexts[2].classList.add('active');\r\n            diagramTexts[2].style.position = 'static'; // Показываем текст\r\n            diagramTexts[2].style.visibility = 'visible';\r\n        }\r\n        if (svgGroups[2]) {\r\n            svgGroups[2].classList.add('active');\r\n        }\r\n    };\r\n\r\n    // Главная логика при загрузке страницы\r\n    // Проверяем наличие табов и диаграмм, чтобы избежать ошибок\r\n    if (tabs.length > 0 && allDiagrams.length > 0) {\r\n        tabs.forEach(tab => {\r\n            tab.addEventListener('click', () => {\r\n                // Деактивируем все табы\r\n                tabs.forEach(t => t.classList.remove('active'));\r\n                // Активируем текущий таб\r\n                tab.classList.add('active');\r\n\r\n                // Деактивируем все блоки диаграмм\r\n                allDiagrams.forEach(diagram => diagram.classList.remove('active'));\r\n\r\n                // Находим целевую диаграмму по data-атрибуту (data-diagram-target)\r\n                const targetDiagramId = tab.dataset.diagramTarget; // Использование data-diagram-target\r\n                const targetDiagram = document.getElementById(targetDiagramId);\r\n\r\n                // Если целевая диаграмма найдена, активируем её и настраиваем\r\n                if (targetDiagram) {\r\n                    targetDiagram.classList.add('active'); // Делаем диаграмму видимой\r\n                    setupDiagramInteractivity(targetDiagram); // Настраиваем интерактивность для этой диаграммы\r\n                    activateDefaultDiagramItem(targetDiagram); // Устанавливаем дефолтный активный элемент\r\n                }\r\n            });\r\n        });\r\n\r\n        // Изначальная настройка интерактивности для ВСЕХ диаграмм при загрузке страницы.\r\n        // Это гарантирует, что mouseover будет работать после переключения, даже если\r\n        // диаграмма изначально скрыта.\r\n        allDiagrams.forEach(diagram => setupDiagramInteractivity(diagram));\r\n\r\n        // Устанавливаем начальную активную вкладку и диаграмму при загрузке\r\n        // Ищем таб, который изначально имеет класс 'active'\r\n        const initialActiveTab = document.querySelector('.benefits__tab.active');\r\n        if (initialActiveTab) {\r\n            // Получаем ID соответствующей диаграммы\r\n            const initialDiagramId = initialActiveTab.dataset.diagramTarget;\r\n            const initialDiagram = document.getElementById(initialDiagramId);\r\n\r\n            if (initialDiagram) {\r\n                initialDiagram.classList.add('active'); // Делаем начальную диаграмму видимой\r\n                activateDefaultDiagramItem(initialDiagram); // Устанавливаем дефолтный элемент для неё\r\n            }\r\n        } else {\r\n            // Если ни один таб не имеет 'active' по умолчанию (что не рекомендуется, но возможно)\r\n            // активируем первый таб и соответствующую диаграмму\r\n            if (tabs[0] && allDiagrams[0]) {\r\n                tabs[0].classList.add('active');\r\n                allDiagrams[0].classList.add('active');\r\n                activateDefaultDiagramItem(allDiagrams[0]);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // click handlers\r\n\r\n    document.addEventListener('click', (e) => {\r\n\r\n        const target = e.target;\r\n\r\n\r\n\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n});\r\n\r\n\r\nif (typeof Fancybox !== \"undefined\" && Fancybox !== null) {\r\n    Fancybox.bind(\"[data-fancybox]\", {\r\n        dragToClose: false,\r\n        closeButton: false\r\n    });\r\n}\r\n\r\n\r\nHTMLElement.prototype.slideToggle = function (duration, callback) {\r\n    if (this.clientHeight === 0) {\r\n        _s(this, duration, callback, true);\r\n    } else {\r\n        _s(this, duration, callback);\r\n    }\r\n};\r\n\r\nHTMLElement.prototype.slideUp = function (duration, callback) {\r\n    _s(this, duration, callback);\r\n};\r\n\r\nHTMLElement.prototype.slideDown = function (duration, callback) {\r\n    _s(this, duration, callback, true);\r\n};\r\n\r\nfunction _s(el, duration, callback, isDown) {\r\n\r\n    if (typeof duration === 'undefined') duration = 400;\r\n    if (typeof isDown === 'undefined') isDown = false;\r\n\r\n    el.style.overflow = \"hidden\";\r\n    if (isDown) el.style.display = \"block\";\r\n\r\n    var elStyles = window.getComputedStyle(el);\r\n\r\n    var elHeight = parseFloat(elStyles.getPropertyValue('height'));\r\n    var elPaddingTop = parseFloat(elStyles.getPropertyValue('padding-top'));\r\n    var elPaddingBottom = parseFloat(elStyles.getPropertyValue('padding-bottom'));\r\n    var elMarginTop = parseFloat(elStyles.getPropertyValue('margin-top'));\r\n    var elMarginBottom = parseFloat(elStyles.getPropertyValue('margin-bottom'));\r\n\r\n    var stepHeight = elHeight / duration;\r\n    var stepPaddingTop = elPaddingTop / duration;\r\n    var stepPaddingBottom = elPaddingBottom / duration;\r\n    var stepMarginTop = elMarginTop / duration;\r\n    var stepMarginBottom = elMarginBottom / duration;\r\n\r\n    var start;\r\n\r\n    function step(timestamp) {\r\n\r\n        if (start === undefined) start = timestamp;\r\n\r\n        var elapsed = timestamp - start;\r\n\r\n        if (isDown) {\r\n            el.style.height = (stepHeight * elapsed) + \"px\";\r\n            el.style.paddingTop = (stepPaddingTop * elapsed) + \"px\";\r\n            el.style.paddingBottom = (stepPaddingBottom * elapsed) + \"px\";\r\n            el.style.marginTop = (stepMarginTop * elapsed) + \"px\";\r\n            el.style.marginBottom = (stepMarginBottom * elapsed) + \"px\";\r\n        } else {\r\n            el.style.height = elHeight - (stepHeight * elapsed) + \"px\";\r\n            el.style.paddingTop = elPaddingTop - (stepPaddingTop * elapsed) + \"px\";\r\n            el.style.paddingBottom = elPaddingBottom - (stepPaddingBottom * elapsed) + \"px\";\r\n            el.style.marginTop = elMarginTop - (stepMarginTop * elapsed) + \"px\";\r\n            el.style.marginBottom = elMarginBottom - (stepMarginBottom * elapsed) + \"px\";\r\n        }\r\n\r\n        if (elapsed >= duration) {\r\n            el.style.height = \"\";\r\n            el.style.paddingTop = \"\";\r\n            el.style.paddingBottom = \"\";\r\n            el.style.marginTop = \"\";\r\n            el.style.marginBottom = \"\";\r\n            el.style.overflow = \"\";\r\n            if (!isDown) el.style.display = \"none\";\r\n            if (typeof callback === 'function') callback();\r\n        } else {\r\n            window.requestAnimationFrame(step);\r\n        }\r\n    }\r\n\r\n    window.requestAnimationFrame(step);\r\n}\n\n//# sourceURL=webpack://tlm-gulp/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;